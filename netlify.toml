[build]
  command = "npm ci --legacy-peer-deps --include=dev && npm run build"
  publish = "dist"

[build.environment]
  NODE_VERSION = "22.16.0"
  NPM_VERSION = "10.8.2"
  CI = "true"
  # Cache bust after complete Argon2 removal + PBKDF2 migration - 2025-08-04
  NETLIFY_CACHE_BUST = "pbkdf2-migration-complete-20250804"
  # Family Federation Decoupling feature flags - BIFROST-First Strategy
  VITE_BIFROST_ENABLED = "false"
  VITE_FEDIMINT_INTEGRATION_ENABLED = "false"
  VITE_FAMILY_FEDERATION_ENABLED = "true"
  VITE_FROST_SIGNING_ENABLED = "true"
  VITE_PAYMENT_AUTOMATION_ENABLED = "false"
  # Phase 3: Public Profile URL System feature flags (default: false for production safety)
  VITE_PUBLIC_PROFILES_ENABLED = "false"
  VITE_PROFILE_SEARCH_ENABLED = "false"
  VITE_PROFILE_ANALYTICS_ENABLED = "false"
  VITE_PROFILE_CUSTOMIZATION_ENABLED = "false"
  # Phase 2A/2B: PKARR Decentralized Identity Verification (default: false for production safety)
  VITE_PKARR_ENABLED = "false"                          # Master PKARR feature flag
  VITE_HYBRID_IDENTITY_ENABLED = "false"                # Hybrid verification (PKARR + kind:0 + DNS)
  VITE_PKARR_AUTO_VERIFY_ON_ADD = "false"               # Auto-verify contacts on creation
  VITE_PKARR_ADMIN_ENABLED = "false"                    # Admin analytics dashboard
  VITE_MULTI_METHOD_VERIFICATION_ENABLED = "false"      # Parallel multi-method verification

# Development server configuration
[dev]
  targetPort = 5173  # Proxy 8888 -> 5173 (Vite)
  # Ensure proper MIME types for module scripts
  autoLaunch = false  # Prevent auto-opening browser to avoid conflicts
  # Force proper MIME type handling
  framework = "#custom"
  command = "npm run dev"

# Redirects for SPA and API endpoints - API only
# Pepper endpoint removed - client now uses fallback (memory optimization)



[[redirects]]
  from = "https://satnam.pub/*"
  to = "https://www.satnam.pub/:splat"
  status = 301
  force = true





# Authenticated endpoints - Unified invitation handler
[[redirects]]
  from = "/api/authenticated/generate-peer-invite"
  to = "/.netlify/functions/invitation-unified"
  status = 200
  force = true

[[redirects]]
  from = "/api/authenticated/*invite*"
  to = "/.netlify/functions/invitation-unified"
  status = 200
  force = true

# Family wallet endpoints (steward/guardian access only) - Unified handler
[[redirects]]
  from = "/api/family/*/wallet"
  to = "/.netlify/functions/family-wallet-unified"
  status = 200
  force = true

# Individual wallet endpoints (existing + new fedimint) - Unified handler
[[redirects]]
  from = "/api/individual/*/wallet"
  to = "/.netlify/functions/individual-wallet-unified"
  status = 200
  force = true


# Individual unified wallet root endpoint (without type segment)
[[redirects]]
  from = "/api/individual/wallet"
  to = "/.netlify/functions/individual-wallet-unified"
  status = 200
  force = true

# NWC connections endpoint used by useNWCWallet hook
[[redirects]]
  from = "/api/user/nwc-connections"
  to = "/.netlify/functions/individual-wallet-unified"
  status = 200
  force = true


# NWC wallet operations endpoint
[[redirects]]
  from = "/api/wallet/nostr-wallet-connect"
  to = "/.netlify/functions/individual-wallet-unified"
  status = 200
  force = true


# Fix dev calls using '/.netlify/functions/api/*' paths
[[redirects]]
  from = "/api/individual/wallet"
  to = "/.netlify/functions/individual-wallet-unified"
  status = 200
  force = true

[[redirects]]
  from = "/api/user/nwc-connections"
  to = "/.netlify/functions/individual-wallet-unified"
  status = 200
  force = true

# Username availability check endpoint (MUST come before generic API routes)
[[redirects]]
  from = "/api/auth/check-username-availability"
  to = "/.netlify/functions/check-username-availability"
  status = 200
  force = true

# Registration endpoint - standalone function for memory optimization (MUST come before generic auth routes)
[[redirects]]
  from = "/api/auth/register-identity"
  to = "/.netlify/functions/register-identity"
  status = 200
  force = true

# Explicit auth refresh endpoint (higher priority than generic)
[[redirects]]
  from = "/api/auth/refresh"
  to = "/.netlify/functions/auth-refresh"
  status = 200
  force = true

# Explicit auth logout endpoint (higher priority than generic)
[[redirects]]
  from = "/api/auth/logout"
  to = "/.netlify/functions/auth-logout"
  status = 200
  force = true


# Consolidated auth endpoints (specific routes override below)
[[redirects]]
  from = "/api/auth/*"
  to = "/.netlify/functions/auth-unified"
  status = 200
  force = true

# Lightweight session-user endpoint for post-auth session bootstrap
[[redirects]]
  from = "/api/auth/session-user"
  to = "/.netlify/functions/auth-session-user"
  status = 200
  force = true

# PhoenixD status endpoint
[[redirects]]
  from = "/api/phoenixd/status"
  to = "/.netlify/functions/phoenixd-status"
  status = 200
  force = true

# Communications API endpoints (single unified handler)
[[redirects]]
  from = "/api/communications/giftwrapped"
  to = "/.netlify/functions/unified-communications"
  status = 200
  force = true

[[redirects]]
  from = "/api/communications/messages"
  to = "/.netlify/functions/unified-communications"
  status = 200
  force = true

[[redirects]]
  from = "/api/communications/get-contacts"
  to = "/.netlify/functions/unified-communications"
  status = 200
  force = true

[[redirects]]
  from = "/api/communications/check-giftwrap-support"
  to = "/.netlify/functions/communications-check-giftwrap-support"
  status = 200
  force = true

# Groups endpoints consolidated under unified-communications
[[redirects]]
  from = "/api/groups"
  to = "/.netlify/functions/unified-communications"
  status = 200
  force = true

[[redirects]]
  from = "/api/group-management"
  to = "/.netlify/functions/unified-communications"
  status = 200
  force = true

# Ensure peer invitation processing endpoint is explicitly mapped
[[redirects]]
  from = "/api/authenticated/process-invitation"
  to = "/.netlify/functions/invitation-unified"
  status = 200
  force = true

# LNURL direct/platform callbacks (must precede generic /api/* redirect)
[[redirects]]
  from = "/api/lnurlp/direct/:username"
  to = "/.netlify/functions/lnbits-proxy?action=lnurlpDirect&username=:username"
  status = 200
  force = true

[[redirects]]
  from = "/api/lnurlp/platform/:username"
  to = "/.netlify/functions/lnbits-proxy?action=lnurlpPlatform&username=:username"
  status = 200
  force = true

# Phase 3: Public Profile URL System - Backward compatibility redirects (301 Permanent)
# Redirect old profile endpoints to unified-profiles with action-based routing
[[redirects]]
  from = "/api/profile"
  to = "/.netlify/functions/unified-profiles?action=getProfile"
  status = 301
  force = true

[[redirects]]
  from = "/api/profile-visibility"
  to = "/.netlify/functions/unified-profiles?action=updateVisibility"
  status = 301
  force = true

[[redirects]]
  from = "/api/profile-analytics"
  to = "/.netlify/functions/unified-profiles?action=getAnalytics"
  status = 301
  force = true

[[redirects]]
  from = "/api/profile-view"
  to = "/.netlify/functions/unified-profiles?action=trackView"
  status = 301
  force = true

[[redirects]]
  from = "/api/search-profiles"
  to = "/.netlify/functions/unified-profiles?action=searchProfiles"
  status = 301
  force = true

# Generic mapping for other API endpoints (excluding auth which is handled above)
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200
  force = false

# Ensure frontend assets are served by Vite with correct MIME types
[[redirects]]
  from = "/src/*"
  to = "/src/:splat"
  status = 200
  force = false  # Let Vite handle these

# CRITICAL: Let Vite handle its internal modules directly - bypass Netlify proxy
[[redirects]]
  from = "/@vite/*"
  to = "/@vite/:splat"
  status = 200
  force = false  # Let Vite handle these completely



# LNURL well-known and callbacks (place before generic .well-known handler)
[[redirects]]
  from = "/.well-known/lnurlp/:username"
  to = "/.netlify/functions/lnbits-proxy?action=lnurlpWellKnown&username=:username"
  status = 200
  force = true



# NIP-05 verification - serve .well-known directory
[[redirects]]
  from = "/.well-known/*"
  to = "/.well-known/:splat"
  status = 200
  force = true

# Dynamic NIP-05 API endpoint
[[redirects]]
  from = "/.well-known/nostr.json"
  to = "/.netlify/functions/nostr"
  status = 200
  force = true

# CRITICAL FIX: Exclude static assets from SPA redirect to prevent MIME type errors
[[redirects]]
  from = "/assets/*"
  to = "/assets/:splat"
  status = 200
  force = false

# Exclude image files from SPA redirect
[[redirects]]
  from = "*.png"
  to = "/:splat"
  status = 200
  force = false

[[redirects]]
  from = "*.jpg"
  to = "/:splat"
  status = 200
  force = false

[[redirects]]
  from = "*.jpeg"
  to = "/:splat"
  status = 200
  force = false

[[redirects]]
  from = "*.svg"
  to = "/:splat"
  status = 200
  force = false

[[redirects]]
  from = "*.ico"
  to = "/:splat"
  status = 200
  force = false

# Exclude JavaScript modules from SPA redirect
[[redirects]]
  from = "*.js"
  to = "/:splat"
  status = 200
  force = false

# Exclude CSS files from SPA redirect
[[redirects]]
  from = "*.css"
  to = "/:splat"
  status = 200
  force = false

# Exclude other static assets from SPA redirect
[[redirects]]
  from = "*.wasm"
  to = "/:splat"
  status = 200
  force = false

# SPA redirects - all non-API, non-static routes go to index.html
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Security headers
[[headers]]
  for = "/*"
  [headers.values]
    # Security headers
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Permissions-Policy = "camera=(), microphone=(), geolocation=()"

    # Content Security Policy - MAXIMUM SECURITY with Web Worker support for PoW mining
    Content-Security-Policy = "default-src 'self'; upgrade-insecure-requests; script-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://*.supabase.co https://*.netlify.app wss://*.supabase.co wss://relay.damus.io wss://nos.lol wss://relay.nostr.band wss://nostr.wine wss://relay.satnam.pub wss://relay.0xchat.com wss://auth.nostr1.com; frame-src 'none'; object-src 'none'; base-uri 'self'; form-action 'self'; worker-src 'self' blob:; manifest-src 'self';"
    # Enforce HTTPS in browsers (HSTS)
    Strict-Transport-Security = "max-age=63072000; includeSubDomains; preload"


    # CORS headers for API - SECURITY HARDENED (restricted to production domain)
    Access-Control-Allow-Origin = "https://www.satnam.pub"
    Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
    Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With"
    Access-Control-Allow-Credentials = "true"
    Access-Control-Max-Age = "86400"

# LNURL well-known headers
[[headers]]
  for = "/.well-known/lnurlp/*"
  [headers.values]
    Content-Type = "application/json"
    Cache-Control = "no-store"

# Ensure index.html is always fresh (prevents stale chunk references)
[[headers]]
  for = "/index.html"
  [headers.values]
    Cache-Control = "no-cache, no-store, must-revalidate"
    Pragma = "no-cache"
    Expires = "0"

# Also guard the root path
[[headers]]
  for = "/"
  [headers.values]
    Cache-Control = "no-cache, no-store, must-revalidate"
    Pragma = "no-cache"
    Expires = "0"

# API-specific headers
[[headers]]
  for = "/.netlify/functions/*"
  [headers.values]
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
    Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With, X-CSRF-Token"
    Access-Control-Max-Age = "86400"
    X-Content-Type-Options = "nosniff"
    X-Frame-Options = "DENY"

# ES Module files (.mjs) MIME type - for Vite internal files
[[headers]]
  for = "/@vite/*"
  [headers.values]
    Content-Type = "application/javascript"
    X-Content-Type-Options = "nosniff"

[[headers]]
  for = "/@vite/client/env.mjs"
  [headers.values]
    Content-Type = "application/javascript"
    X-Content-Type-Options = "nosniff"

[[headers]]
  for = "**/*.mjs"
  [headers.values]
    Content-Type = "application/javascript"
    X-Content-Type-Options = "nosniff"

[[headers]]
  for = "*.mjs"
  [headers.values]
    Content-Type = "application/javascript"
    X-Content-Type-Options = "nosniff"

# CRITICAL FIX: JavaScript modules MIME type
[[headers]]
  for = "/assets/*.js"
  [headers.values]
    Content-Type = "application/javascript"
    X-Content-Type-Options = "nosniff"
    Cache-Control = "public, max-age=31536000, immutable"

# Ensure all JS files have correct MIME type
[[headers]]
  for = "*.js"
  [headers.values]
    Content-Type = "application/javascript"
    X-Content-Type-Options = "nosniff"

# Static assets caching
[[headers]]
  for = "/assets/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

# Service worker caching
[[headers]]
  for = "/sw.js"
  [headers.values]
    Cache-Control = "no-cache"

# Environment-specific settings
[context.production]
  [context.production.environment]
    NODE_ENV = "production"
    VITE_API_BASE_URL = "/api"

[context.deploy-preview]
  [context.deploy-preview.environment]
    NODE_ENV = "preview"
    VITE_API_BASE_URL = "/api"

[context.branch-deploy]
  [context.branch-deploy.environment]
    NODE_ENV = "development"
    VITE_API_BASE_URL = "/api"

[context.dev]
  [context.dev.environment]
    NODE_ENV = "development"
    VITE_API_BASE_URL = "/api"

# Functions configuration - Optimized for memory and storage efficiency
[functions]
  # Deploy only functions from the minimized active directory to avoid storage exhaustion
  directory = "netlify/functions_active"
  # Node.js version for functions
  node_bundler = "esbuild"
  # MEMORY OPTIMIZATION: Externalize heavy dependencies to reduce bundle size
  # Add OTP and Hybrid Auth heavy deps to avoid bundling
  external_node_modules = [
    "pg",
    "redis",
    "jsonwebtoken",
    "@supabase/supabase-js",
    "@noble/curves",
    "@noble/hashes",
    "crypto-js",
    "@scure/bip32",
    "@scure/bip39",
    "@scure/base",
    "phoenix-server-js",
    "qrcode",
    "zod",
    "nostr-tools",
    "isomorphic-ws",
    "ws",
    "bech32",
    "@scure/base"
  ]
  # CRITICAL: Exclude more files to reduce storage usage in bundles
  # IMPORTANT: Exclude functions_lazy directory - these are loaded dynamically only
  included_files = [
    "!**/__tests__/**",
    "!**/*.test.*",
    "!**/*.spec.*",
    "!**/examples/**",
    "!**/*.md",
    "!**/*.map",
    "!**/*.d.ts",
    "!**/coverage/**",
    "!**/docs/**",
    "!**/functions_lazy/**"
  ]

# Essential functions with memory optimization
[functions."register-identity"]
  node_bundler = "esbuild"
  memory_size = 512  # 512MB for identity operations
  timeout = 20

# Unified auth handler configuration
[functions."auth-unified"]
  node_bundler = "esbuild"
  memory_size = 256  # 256MB for authentication operations
  timeout = 15
  included_files = [
    # Authentication implementations - LAZY LOADED via dynamic imports
    "api/auth/signin.js",
    "api/auth/nip07-challenge.js",
    "api/auth/nip07-signin.js",
    "api/auth/logout.js",
    "api/auth/refresh.js",
    "api/auth/check-refresh.js",
    "netlify/functions/supabase.js",
    "netlify/functions/security/session-manager.js",
    "netlify/functions/security/session-manager.ts",
    "lib/security/privacy-hashing.js",
    "lib/security/duid-generator.js",
    "netlify/functions/utils/env.ts",
    "utils/privacy-logger.js"
  ]


# Unified communications function configuration
[functions."unified-communications"]
  node_bundler = "esbuild"
  memory_size = 128
  timeout = 15
  included_files = [
    "api/communications/messages.js",
    "api/communications/get-contacts.js",
    "api/communications/giftwrapped.js",
    "netlify/functions/utils/rate-limiter.js",
    "netlify/functions/supabase.js",
    "netlify/functions/security/session-manager.js"
  ]



[functions."nostr"]
  node_bundler = "esbuild"
  memory_size = 256  # 256MB for NIP-05 operations
  timeout = 10



[functions."secure-storage"]
  node_bundler = "esbuild"
  memory_size = 512  # 512MB for encryption operations
  timeout = 20

[functions."crypto-validator"]
  node_bundler = "esbuild"
  memory_size = 256  # 256MB for validation operations
  timeout = 10

[functions."crypto-profile-installer"]
  node_bundler = "esbuild"
  memory_size = 384  # 384MB for crypto module loading
  timeout = 15

# Unified wallet handlers (lazy-loaded)
[functions."family-wallet-unified"]
  node_bundler = "esbuild"
  memory_size = 128  # Minimal memory for unified proxy function
  timeout = 15
  included_files = [
    "netlify/functions_lazy/family-cashu-wallet.js",
    "netlify/functions_lazy/family-lightning-wallet.js",
    "netlify/functions_lazy/family-fedimint-wallet.js"
  ]

[functions."individual-wallet-unified"]
  node_bundler = "esbuild"
  memory_size = 128  # Minimal memory for unified proxy function
  timeout = 15
  included_files = [
    "netlify/functions_lazy/individual-cashu-wallet.js",
    "netlify/functions_lazy/individual-lightning-wallet.js",
    "netlify/functions_lazy/individual-fedimint-wallet.js"
  ]

[functions."invitation-unified"]
  node_bundler = "esbuild"
  memory_size = 128  # Minimal memory for unified proxy function
  timeout = 15

[functions."check-username-availability"]
  node_bundler = "esbuild"
  memory_size = 128  # Minimal memory for username availability check
  timeout = 10
  included_files = [
    "api/auth/check-username-availability.js",
    "netlify/functions/supabase.js",
    "netlify/functions/utils/env.ts"
  ]

[functions."phoenixd-status"]
  node_bundler = "esbuild"
  memory_size = 128  # Minimal memory for proxy function
  timeout = 10

# Scheduled functions for cleanup tasks (only essential ones)
[functions."cleanup-expired-credentials"]
  schedule = "0 */6 * * *"  # Run every 6 hours

# Phase 2A Day 6: Scheduled PKARR Republishing
[functions."scheduled-pkarr-republish"]
  schedule = "0 */6 * * *"  # Run every 6 hours (PKARR records have 24h TTL)
  memory = 256
  timeout = 60

# Phase 1: SimpleProof Timestamping Functions
[functions."simpleproof-timestamp"]
  memory = 256
  timeout = 30
  included_files = ["netlify/functions_active/utils/env.ts", "netlify/functions_active/utils/rate-limiter.js", "netlify/functions_active/supabase.js"]

[functions."simpleproof-verify"]
  memory = 128
  timeout = 15
  included_files = ["netlify/functions_active/utils/env.ts", "netlify/functions_active/utils/rate-limiter.js", "netlify/functions_active/supabase.js"]

# Phase 2: Iroh Node Discovery Functions
[functions."iroh-discover-node"]
  memory = 256
  timeout = 30
  included_files = ["netlify/functions_active/utils/env.ts", "netlify/functions_active/utils/rate-limiter.js", "netlify/functions_active/supabase.js"]

[functions."iroh-verify-node"]
  memory = 128
  timeout = 15
  included_files = ["netlify/functions_active/utils/env.ts", "netlify/functions_active/utils/rate-limiter.js"]

# Phase 3: Public Profile URL System - Unified Profiles Function
[functions."unified-profiles"]
  node_bundler = "esbuild"
  memory_size = 256  # 256MB for profile operations (consolidated from 5 separate functions)
  timeout = 15
  included_files = [
    "netlify/functions_active/utils/env.ts",
    "netlify/functions_active/utils/rate-limiter.js",
    "netlify/functions_active/supabase.js",
    "netlify/functions/security/session-manager.ts"
  ]

# Build optimization settings
[build.processing]
  skip_processing = false

[build.processing.css]
  bundle = true
  minify = true

[build.processing.js]
  bundle = true
  minify = true

[build.processing.html]
  pretty_urls = true

# Function size limits and memory optimization
[functions.settings]
# Reduced to comply with Netlify large-function limits
max_size = "50MB"     # Down from 75MB to meet zipped limit
memory_size = 1024    # Down from 1536MB to meet memory limit
timeout = 26          # Down from 45s to meet timeout limit